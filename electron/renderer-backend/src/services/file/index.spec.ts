import fileService from "./index";

import path from "path";
import fs from "fs";
import { promisify } from "util";
const rimraf = promisify(require("rimraf"));

describe("services - file", () => {
	describe("doesFileExist", () => {
		const noImagePath = path.join(__dirname, "no-images");

		beforeEach(() => {
			// create temp directories and files
			fs.mkdirSync(noImagePath);
			fs.writeFileSync(path.join(noImagePath, "dumb-file.ts"), "dummy file");
		});

		afterEach(async () => {
			await rimraf(noImagePath, { recursive: true });
		});

		it("should return true when a file exists", () => {
			const realPath = path.join(noImagePath, "dumb-file.ts");
			expect(fileService.doesFileExist(realPath)).toBe(true);
		});

		it("should return false when a file exists", () => {
			const fakePath = path.join(noImagePath, "non-exisitng-file.ts");

			expect(fileService.doesFileExist(fakePath)).toBe(false);
		});
	});

	describe("recursivelyFindImages", () => {
		const noImagePath = path.join(__dirname, "no-images");
		const imagePath = path.join(__dirname, "images");

		beforeEach(() => {
			// create temp directories and files
			fs.mkdirSync(noImagePath);
			fs.writeFileSync(path.join(noImagePath, "dumb-file.ts"), "dummy file");

			fs.mkdirSync(imagePath);
			fs.writeFileSync(path.join(imagePath, "dumb-file.ts"), "dummy file");
			fs.writeFileSync(path.join(imagePath, "image1.png"), "image file");
			fs.writeFileSync(path.join(imagePath, "image2.PNG"), "image file");
			fs.writeFileSync(path.join(imagePath, "image3.jpg"), "image file");
			fs.writeFileSync(path.join(imagePath, "image4.JPG"), "image file");
			fs.writeFileSync(path.join(imagePath, "image5.jpeg"), "image file");
			fs.writeFileSync(path.join(imagePath, "image6.JPEG"), "image file");
		});

		afterEach(async () => {
			await rimraf(noImagePath, { recursive: true });
			await rimraf(imagePath, { recursive: true });
		});

		it("should return emply array when there are no image files", async () => {
			expect(await fileService.recursivelyFindImages(noImagePath)).toEqual([]);
		});

		it("should return array with paths when there are image files", async () => {
			expect(
				(await fileService.recursivelyFindImages(imagePath)).length
			).toEqual(6);
		});
	});

	describe("generateFileHash", () => {
		const folderPath = path.join(__dirname, "no-images");
		const filePath1 = path.join(folderPath, "dumb-file1.ts");
		const filePath2 = path.join(folderPath, "dumb-file2.ts");

		beforeEach(() => {
			// create temp directories and files
			fs.mkdirSync(folderPath);
			fs.writeFileSync(filePath1, "dummy file 1");
			fs.writeFileSync(filePath2, "dummy file 2");
		});

		afterEach(async () => {
			await rimraf(folderPath, { recursive: true });
		});

		it("should return the file hash", async () => {
			expect(await fileService.generateFileHash(filePath1)).toBe(
				"b7a41665d3c1bb41cc434218664e0964"
			);

			expect(await fileService.generateFileHash(filePath2)).toBe(
				"ad9924197dc1d7f9d80bdecd50d1c046"
			);
		});
	});

	describe("normalizePath", () => {
		it("should append the file:// prefix when non http path", () => {
			expect(fileService.normalizePath("/user/path/image.jpeg")).toBe(
				"file:///user/path/image.jpeg"
			);
		});

		it("should not append the file:// prefix when http path", () => {
			expect(fileService.normalizePath("http:/user/path/image.jpeg")).toBe(
				"http:/user/path/image.jpeg"
			);
		});
	});

	describe("loadEXIFData", () => {
		const imagePath = path.join(__dirname, "test-data", "image-with-exif.jpg");

		it("should return the exif data when there is a file", async () => {
			expect(JSON.stringify(await fileService.loadEXIFData(imagePath))).toEqual(
				'{"image":{"ImageDescription":"                               ","Make":"NIKON","Model":"COOLPIX P6000","Orientation":1,"XResolution":300,"YResolution":300,"ResolutionUnit":2,"Software":"Nikon Transfer 1.1 W","ModifyDate":"2008:11:01 21:15:07","YCbCrPositioning":1,"ExifOffset":268,"GPSInfo":926},"thumbnail":{"Compression":6,"XResolution":72,"YResolution":72,"ResolutionUnit":2,"ThumbnailOffset":4548,"ThumbnailLength":6339},"exif":{"ExposureTime":0.00560852,"FNumber":4.5,"ExposureProgram":2,"ISO":64,"ExifVersion":{"type":"Buffer","data":[48,50,50,48]},"DateTimeOriginal":"2008:10:22 16:29:49","CreateDate":"2008:10:22 16:29:49","ComponentsConfiguration":{"type":"Buffer","data":[1,2,3,0]},"ExposureCompensation":0,"MaxApertureValue":2.9,"MeteringMode":5,"LightSource":0,"Flash":16,"FocalLength":6,"MakerNote":{"type":"Buffer","data":[78,105,107,111,110,0,2,0,0,0,73,73,42,0,8,0,0,0,35,0,1,0,7,0,4,0,0,0,48,50,49,48,2,0,3,0,2,0,0,0,0,0,0,0,3,0,2,0,6,0,0,0,178,1,0,0,4,0,2,0,8,0,0,0,184,1,0,0,5,0,2,0,13,0,0,0,192,1,0,0,6,0,2,0,7,0,0,0,206,1,0,0,7,0,2,0,7,0,0,0,214,1,0,0,8,0,2,0,8,0,0,0,222,1,0,0,10,0,5,0,1,0,0,0,230,1,0,0,15,0,2,0,7,0,0,0,238,1,0,0,16,0,7,0,238,9,0,0,246,1,0,0,33,0,7,0,8,0,0,0,228,11,0,0,34,0,3,0,1,0,0,0,0,0,0,0,41,0,3,0,2,0,0,0,0,0,0,0,47,0,3,0,1,0,0,0,0,0,0,0,128,0,2,0,14,0,0,0,236,11,0,0,129,0,2,0,9,0,0,0,250,11,0,0,130,0,2,0,13,0,0,0,4,12,0,0,134,0,5,0,1,0,0,0,18,12,0,0,136,0,7,0,4,0,0,0,0,0,0,0,143,0,2,0,16,0,0,0,26,12,0,0,145,0,7,0,18,0,0,0,42,12,0,0,148,0,8,0,1,0,0,0,0,0,0,0,149,0,2,0,5,0,0,0,60,12,0,0,155,0,3,0,2,0,0,0,0,0,0,0,156,0,2,0,20,0,0,0,66,12,0,0,157,0,3,0,1,0,0,0,0,0,0,0,158,0,3,0,6,0,0,0,86,12,0,0,170,0,2,0,7,0,0,0,98,12,0,0,172,0,2,0,6,0,0,0,106,12,0,0,178,0,2,0,10,0,0,0,112,12,0,0,189,0,7,0,58,0,0,0,122,12,0,0,9,14,2,0,32,0,0,0,180,12,0,0,16,14,4,0,1,0,0,0,220,12,0,0,34,14,3,0,4,0,0,0,212,12,0,0,0,0,0,0,67,79,76,79,82,0,70,73,78,69,32,32,32,0,65,85,84,79,32,32,32,32,32,32,32,32,0,0,78,79,82,77,65,76,0,0,65,70,45,83,32,32,0,44,32,32,32,32,32,32,32,0,105,36,0,0,232,3,0,0,65,85,84,79,32,32,0,0,5,2,0,0,0,0,0,0,0,0,255,1,0,0,0,49,46,48,0,0,0,0,0,0,0,25,97,18,49,0,0,13,165,0,0,48,104,0,0,0,228,0,0,7,32,0,0,20,36,0,0,2,121,0,0,21,232,0,132,0,243,0,64,45,47,0,0,0,0,0,0,0,0,0,0,46,230,0,0,0,0,0,0,64,0,0,0,0,0,0,32,0,0,0,0,0,0,46,254,37,52,51,12,17,0,0,0,0,0,0,0,0,0,74,0,0,160,0,200,2,132,40,9,50,196,34,34,34,34,0,6,255,188,255,255,255,251,21,54,3,254,3,229,0,0,17,17,17,17,1,214,3,143,3,176,1,94,2,0,1,215,1,253,2,1,1,1,112,70,0,2,3,82,0,60,0,118,0,60,0,118,0,60,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,177,1,86,1,253,2,162,3,65,0,0,1,58,2,1,3,51,255,255,19,148,21,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,136,240,0,3,254,0,0,0,32,8,13,0,0,3,229,0,0,1,135,0,0,4,39,0,0,0,3,4,16,3,201,4,39,0,5,3,252,3,242,0,139,36,201,0,0,2,188,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,165,20,133,20,175,20,175,19,170,18,226,0,0,0,0,51,248,54,15,55,6,54,0,50,173,47,180,0,0,0,0,119,119,119,119,1,51,1,90,1,24,1,80,112,0,30,163,0,0,90,0,0,33,0,0,1,208,1,242,1,153,2,129,1,215,1,253,114,0,0,0,0,4,21,48,1,0,68,0,0,0,0,0,0,210,1,44,0,180,0,235,1,24,1,114,52,21,22,24,0,35,0,0,1,45,1,90,1,45,1,71,1,45,1,71,16,91,0,0,0,89,10,0,0,28,35,33,20,16,10,0,16,144,12,101,4,248,19,65,0,0,0,0,0,0,0,0,0,0,0,0,153,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,242,0,0,0,0,0,0,0,0,0,0,0,0,175,219,0,3,255,255,255,255,255,255,255,255,15,255,255,255,255,255,255,255,255,255,255,255,19,165,20,133,20,175,20,175,19,170,18,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,170,170,170,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,0,106,0,47,0,106,0,132,0,0,0,0,39,112,0,0,36,37,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,187,187,187,0,9,7,210,8,27,8,25,8,27,7,224,7,158,0,0,0,0,0,0,0,0,0,0,0,0,3,175,3,205,4,14,3,228,3,177,3,138,0,0,0,0,0,0,0,0,0,0,0,0,1,251,2,4,2,7,1,250,1,228,1,218,0,0,0,0,0,0,0,0,0,0,0,0,1,133,1,145,1,156,1,159,1,132,1,119,0,0,0,0,0,0,0,0,0,0,0,0,5,147,5,197,5,238,5,219,5,173,5,91,0,0,0,0,0,0,0,0,0,0,0,0,1,232,1,229,1,216,1,205,1,194,1,177,0,0,0,0,0,0,0,0,0,0,0,0,1,66,1,75,1,65,1,61,1,57,1,53,0,0,0,0,0,0,0,0,0,0,0,0,9,191,10,20,10,56,10,1,9,42,8,109,0,0,0,0,0,0,0,0,0,0,0,0,3,190,3,226,3,219,3,214,3,168,3,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,204,204,204,0,170,1,30,1,15,1,79,0,246,1,60,0,236,1,57,59,254,5,223,8,225,9,118,97,0,0,0,0,0,0,0,0,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,221,221,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,238,238,238,0,4,0,6,255,255,0,2,255,253,255,254,255,251,255,252,255,232,255,242,255,213,255,223,255,197,255,205,0,0,255,188,0,26,1,210,19,207,19,148,20,58,20,10,20,155,20,108,20,246,20,202,21,54,21,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,16,0,0,32,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,18,0,0,0,0,2,24,0,1,2,0,0,0,128,0,0,48,2,16,0,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,101,111,156,0,176,0,170,0,182,0,182,0,193,0,195,0,232,0,199,1,49,1,67,1,7,1,4,0,162,0,166,1,15,0,242,0,176,0,170,0,182,0,182,0,193,0,195,0,232,0,199,1,49,1,67,1,7,1,4,0,162,0,166,1,15,0,242,0,175,0,173,0,185,0,177,0,199,0,186,0,232,0,233,1,23,1,16,1,1,1,45,0,187,0,210,1,10,0,198,0,174,0,169,0,179,0,176,0,192,0,189,0,227,0,200,1,16,1,3,1,2,1,53,0,202,1,7,1,6,0,192,0,176,0,172,0,177,0,176,0,185,0,181,1,23,0,207,1,57,1,9,1,12,1,54,0,248,1,3,0,253,0,212,0,180,0,178,0,181,0,179,0,185,0,181,1,74,0,234,1,70,1,48,1,28,1,73,1,40,1,44,1,9,1,14,0,216,0,226,0,196,0,190,0,241,0,202,1,67,1,32,1,51,1,39,1,37,1,57,1,20,1,42,1,15,1,13,1,18,1,31,0,220,1,2,1,18,1,5,1,45,1,23,1,25,1,22,1,17,1,13,1,8,1,13,1,19,1,19,1,43,1,72,1,7,1,29,1,12,1,23,1,62,1,46,1,71,1,66,1,59,1,57,1,36,1,42,1,22,1,25,0,246,0,236,1,1,0,254,1,47,1,49,1,67,1,65,1,67,1,71,1,38,1,60,1,43,1,35,1,42,1,40,1,5,1,4,1,18,1,13,1,25,1,38,1,54,1,34,1,21,1,27,1,6,1,12,0,254,1,2,1,3,1,1,1,24,1,5,1,17,1,27,1,0,1,14,1,9,1,6,0,250,0,251,0,250,0,250,0,240,0,247,0,240,0,239,1,20,1,31,1,9,1,15,1,5,1,22,0,255,1,3,0,251,0,251,0,249,0,250,0,239,0,240,0,239,0,241,1,18,1,10,1,11,1,11,1,3,1,4,0,254,1,1,0,246,0,246,0,253,0,251,0,241,0,243,0,244,0,242,0,253,0,255,1,8,1,5,0,254,1,6,0,255,1,1,0,249,0,249,0,244,0,242,0,240,0,238,0,246,0,241,1,4,0,255,1,11,1,7,1,20,1,20,1,1,1,25,0,246,1,2,0,240,0,243,0,238,0,247,0,236,0,236,1,32,1,30,1,33,1,33,1,40,1,39,1,52,1,41,1,103,1,98,1,86,1,88,1,26,1,29,1,79,1,68,1,32,1,30,1,33,1,33,1,40,1,39,1,52,1,41,1,103,1,98,1,86,1,88,1,26,1,29,1,79,1,68,1,32,1,32,1,35,1,31,1,42,1,36,1,49,1,58,1,89,1,77,1,84,1,117,1,14,1,53,1,66,1,42,1,32,1,31,1,33,1,33,1,38,1,35,1,55,1,41,1,78,1,69,1,79,1,119,1,20,1,85,1,61,1,0,1,33,1,32,1,34,1,33,1,38,1,35,1,83,1,45,1,104,1,74,1,91,1,124,1,81,1,85,1,58,1,42,1,35,1,35,1,37,1,35,1,41,1,36,1,104,1,63,1,120,1,92,1,105,1,125,1,120,1,122,1,69,1,74,1,52,1,61,1,43,1,41,1,76,1,47,1,107,1,106,1,117,1,98,1,120,1,126,1,95,1,129,1,70,1,73,1,103,1,92,1,60,1,87,1,105,1,86,1,90,1,104,1,98,1,95,1,104,1,84,1,85,1,93,1,66,1,70,1,102,1,80,1,105,1,105,1,98,1,108,1,85,1,89,1,73,1,78,1,73,1,71,1,71,1,70,1,70,1,68,1,75,1,79,1,69,1,67,1,85,1,83,1,79,1,78,1,74,1,75,1,70,1,72,1,76,1,70,1,81,1,81,1,70,1,69,1,71,1,71,1,69,1,72,1,67,1,73,1,68,1,68,1,64,1,67,1,61,1,63,1,69,1,65,1,71,1,73,1,63,1,67,1,63,1,63,1,64,1,64,1,61,1,62,1,60,1,62,1,58,1,59,1,56,1,57,1,63,1,65,1,63,1,63,1,63,1,62,1,63,1,63,1,60,1,62,1,59,1,59,1,58,1,58,1,58,1,58,1,65,1,67,1,62,1,64,1,63,1,63,1,62,1,63,1,60,1,61,1,60,1,60,1,57,1,58,1,57,1,57,1,62,1,62,1,63,1,62,1,62,1,63,1,61,1,62,1,60,1,60,1,59,1,60,1,58,1,58,1,60,1,58,1,65,1,64,1,66,1,65,1,62,1,64,1,60,1,62,1,57,1,60,1,58,1,59,1,59,1,60,1,57,1,58,0,1,0,64,1,240,0,0,0,78,79,82,77,65,76,32,32,32,32,32,32,32,0,78,79,82,77,65,76,32,32,0,32,79,70,70,32,32,32,32,32,32,32,32,32,0,32,1,0,0,0,1,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,67,0,0,79,70,70,32,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,0,0,0,0,0,0,0,0,0,0,0,78,79,82,77,65,76,0,32,86,82,45,79,78,0,78,79,82,77,65,76,32,32,0,0,48,49,48,48,83,84,65,78,68,65,82,68,32,32,32,0,0,0,0,0,0,0,0,0,83,84,65,78,68,65,82,68,32,32,32,0,0,0,0,0,0,0,0,0,1,0,0,0,0,128,0,0,255,128,255,255,255,255,67,79,79,76,80,73,88,32,80,54,48,48,48,86,49,46,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,0,0,0,0]},"UserComment":{"type":"Buffer","data":[65,83,67,73,73,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0]},"FlashpixVersion":{"type":"Buffer","data":[48,49,48,48]},"ColorSpace":1,"ExifImageWidth":640,"ExifImageHeight":480,"InteropOffset":896,"FileSource":{"type":"Buffer","data":[3]},"SceneType":{"type":"Buffer","data":[1]},"CustomRendered":0,"ExposureMode":0,"WhiteBalance":0,"DigitalZoomRatio":0,"FocalLengthIn35mmFormat":28,"SceneCaptureType":0,"GainControl":0,"Contrast":0,"Saturation":0,"Sharpness":0,"SubjectDistanceRange":0},"gps":{"GPSLatitudeRef":"N","GPSLatitude":[43,28,1.76399999],"GPSLongitudeRef":"E","GPSLongitude":[11,53,7.42199999],"GPSAltitudeRef":0,"GPSTimeStamp":[14,28,17.24],"GPSSatellites":"06","GPSImgDirectionRef":"\\u0000","GPSMapDatum":"WGS-84   ","GPSDateStamp":"2008:10:23"},"interoperability":{"InteropIndex":"R98","InteropVersion":{"type":"Buffer","data":[48,49,48,48]}},"makernote":{"error":"Unable to extract Makernote information as it is in an unsupported or unrecognized format."}}'
			);
		});

		it("should return undefined when there is no valid file", async () => {
			expect(await fileService.loadEXIFData("random/path")).toBe(undefined);
		});
	});

	describe("getDataDirectory", () => {
		it("should return the data directory (differnet in each OS)", () => {
			expect(fileService.getDataDirectory().length > 0).toBe(true);
		});
	});
});
